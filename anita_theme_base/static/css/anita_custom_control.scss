// Custom form controls
.custom-control {
    min-height: (1rem * $line-height-base);
    padding-left: 1.68rem;

    &:hover {
      cursor: pointer;
    }

    .custom-control-label:before {
      pointer-events: all;
      &:focus {
        background: red;
      }
    }
  }

  .custom-control-inline {
    margin-right: $custom-control-spacer-x;
  }

  .custom-control-input {
    &:checked ~ .custom-control-label::before {
      color: $custom-control-indicator-checked-color;
      border-color: transparent;
      //@include gradient-bg($custom-control-indicator-checked-bg);
      //@include box-shadow($custom-control-indicator-checked-box-shadow);
    }

    &:focus ~ .custom-control-label::before {
      // the mixin is not used here to make sure there is feedback
      // box-shadow: $custom-control-indicator-focus-box-shadow;
    }

    &:active ~ .custom-control-label::before {
      color: $custom-control-indicator-active-color;
      background-color: $custom-control-indicator-active-bg;
      @include box-shadow($custom-control-indicator-active-box-shadow);
    }

    &:disabled {
      ~ .custom-control-label {
        color: $custom-control-description-disabled-color; // $custom-control-label-disabled-color

        &:hover {
          cursor: not-allowed;
        }

        &::before {
          background-color: $custom-control-indicator-disabled-bg;
        }
      }
    }
  }

  // Custom control indicators
  // Build the custom controls out of psuedo-elements.
  .custom-control-label {
    position: static;

    &:hover {
      cursor: pointer;
    }

    // Background-color and (when enabled) gradient
    &::before {
      top: (($line-height-base - $custom-control-indicator-size) / 2);
      left: 0;
      width: $custom-control-indicator-size;
      height: $custom-control-indicator-size;
      background-color: $custom-control-indicator-bg;
      border: $custom-control-indicator-border;
      //transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
      @include box-shadow($custom-control-indicator-box-shadow);
    }

    // Foreground (icon)
    &::after {
      top: (($line-height-base - $custom-control-indicator-size) / 2);
      width: $custom-control-indicator-size;
      height: $custom-control-indicator-size;
      background-size: $custom-control-indicator-bg-size;
    }
  }

  // Custom Switches (core)
  //
  // Adjustments for the default Bootstrap custom switches.

  .custom-switch {
    padding-left: $custom-switch-padding-left;

    .custom-control-label {
      position: relative;
    }
  }

  // Checkboxes
  // Tweak just a few things for checkboxes.

  .custom-checkbox {

    .custom-control-label::before {
      @include border-radius($custom-checkbox-indicator-border-radius);
    }

    .custom-control-label::after {
      content: '';
      position: absolute;
      top: 5px;
      left: 7px;
      width: 5px;
      height: 11px;
      opacity: 0;
      transform: rotate(45deg) scale(0);
      border-right: 2px solid $white;
      border-bottom: 2px solid $white;
      //transition: $custom-checkbox-indicator-transition;
      //transition-delay: 100ms;
    }

    .custom-control-input:checked ~ .custom-control-label {
      &::before {
        background-image: none;
      }

      &::after {
        opacity: 1;
        transform: rotate(45deg) scale(1);
        background-image: $custom-checkbox-indicator-icon-checked;
      }
    }

    .custom-control-input:indeterminate ~ .custom-control-label {
      &::before {
        border: none;
        @include gradient-bg($custom-checkbox-indicator-indeterminate-bg);
        @include box-shadow($custom-checkbox-indicator-indeterminate-box-shadow);
      }

      &::after {
        content: '';
        position: absolute;
        transform: scale(1);
        background-image: $custom-checkbox-indicator-icon-indeterminate;
        background-color: $white;
        border: none;
        width: 10px;
        height: 2px;
        top: 11px;
        left: 4px;
        opacity: 1;
        transition: none;
      }
    }

    .custom-control-input:disabled:checked ~ .custom-control-label {
      &::before {
        // background: $custom-control-indicator-disabled-bg;
        border-color: $border-color;
      }

      &::after {
        border-color: $border-color;
      }
    }

    .custom-control-input:not(:checked):not(:indeterminate):disabled ~ .custom-control-label:before {
      background: #e2e2e0 !important;
      opacity: 0.5 !important;
    }
  }

  // Radios
  // Tweak just a few things for radios.
  .custom-radio {

    .custom-control-label::before {
      border-radius: $custom-radio-indicator-border-radius;
    }

    .custom-control-label::after {
      content: '';
      border-radius: 50%;
      transform: scale(0);
      background-image: none !important;
      position: absolute;
      background: #fff;
      width: 0.8rem;
      height: 0.8rem;
      top: 8px;
      left: 5px;
      transition: all 250ms cubic-bezier(.27,.01,.38,1.06);
      transition-delay: .1s;
      opacity: 0;
      transform: scale(0);
    }

    .custom-control-input:checked ~ .custom-control-label {
      &::before {
       // @include gradient-bg($custom-control-indicator-checked-bg);
      }
      &::after {
        opacity: 1;
        transform: scale(1);
      }
    }

    .custom-control-input:disabled {
      &:checked ~ .custom-control-label::before {
        background-color: lighten($blueish-grey, 30%);
      }
    }

    .custom-control-input:disabled:checked ~ .custom-control-label {
      &::before {
        background: $custom-control-indicator-disabled-bg;
        border-color: $border-color;
      }

      &::after {
        background: $border-color;
      }
    }

    .custom-control-input:not(:checked):not(:indeterminate):disabled ~ .custom-control-label:before {
      background: rgba(238,238,238,0.51);
      opacity: 0.5;
    }
  }

  // Custom toggle
  .custom-toggle {
    position: relative;
    padding-left: ($custom-toggle-width + 0.625rem);

    .custom-control-label {
      // Background
      &::before {
        position: absolute;
        top: 0;
        left: 0;
        display: block;
        width: $custom-toggle-width;
        height: $custom-toggle-height;
        background: $custom-toggle-background-color;
        border-radius: $custom-toggle-border-radius;
        border: $custom-toggle-border;
      }

      // Knob
      &::after {
        content: '';
        position: absolute;
        top: 0.25rem;
        left: 0.25rem;
        width: $custom-toggle-knob-width;
        height: $custom-toggle-knob-height;
        background: $input-border-color;
        border-radius: $custom-toggle-knob-border-radius;
        //transition: 350ms;
      }
    }

    // Checked state
    .custom-control-input:checked ~ .custom-control-label {
      // Background
      &::before {
        background: $custom-toggle-checked-background;
        border-color: $custom-toggle-checked-border-color;
      }

      // Knob
      &::after {
        left: $custom-toggle-width - $custom-toggle-border-width - 0.1875rem;
        transform: translateX(-100%);
        background: $custom-toggle-checked-knob-background;
      }
    }

    // Disabled and checked state
    .custom-control-input:checked:disabled ~ .custom-control-label {
      &::before {
        background: $custom-control-indicator-disabled-bg;
        border-color: $border-color;
      }

      &::after {
        background: $border-color;
      }
    }

    // Active state
    .custom-control-input:active:not(:disabled) ~ .custom-control-label {
      // Knob
      &::after {
        width: $custom-toggle-knob-active-width;
      }
    }

    // Active, but not checked.
    .custom-control-input:active:not(:checked) ~ .custom-control-label {
      &::before {
        background-color: $custom-toggle-background-color;
      }
    }

    // Disabled and active.
    .custom-control-input:disabled:active ~ .custom-control-label {
      &::before {
        background-color: $custom-control-indicator-disabled-bg;
      }
    }

    // Focus state
    .custom-control-input:focus {
      & ~ .custom-control-label {
        &::before {
          box-shadow: $custom-toggle-focus-box-shadow;
        }
      }

      &:not(:checked) ~ .custom-control-label {
        &::before {
          box-shadow: $input-focus-box-shadow;
        }
      }
    }

    &.custom-toggle-sm {
      padding-left: 2.625rem;

      .custom-control-label {
        // Background
        &::before {
          top: .1875rem;
          position: absolute;
          display: block;
          width: $custom-toggle-width-sm;
          height: $custom-toggle-height-sm;
          background: $custom-toggle-background-color;
          border-radius: $custom-toggle-border-radius;
          border: $custom-toggle-border;
        }

        // Knob
        &::after {
          content: '';
          position: absolute;
          top: .375rem;
          left: 0.1875rem;
          width: $custom-toggle-knob-width-sm;
          height: $custom-toggle-knob-height-sm;
        }
      }

      // Checked state
      .custom-control-input:checked ~ .custom-control-label {
        // Knob
        &::after {
          left: $custom-toggle-width-sm - $custom-toggle-border-width - 0.1875rem;
        }
      }

      // Active state
      .custom-control-input:active:not(:disabled) ~ .custom-control-label {
        // Knob
        &::after {
          width: $custom-toggle-knob-active-width-sm;
        }
      }
    }
  }

.custom-control-input:focus:not(:checked) ~ .custom-control-label::before {
    border-color: inherit !important;
}
